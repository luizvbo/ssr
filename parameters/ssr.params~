# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = koza.params


# Stolen from koza/params -- overwriting just
# a little for readability
# You need to create at least one function set, 
# called "f0", which your first tree will use.  

pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
#pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
#pop.subpop.0.species.pipe.source.1.prob = 0.1
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1

#
# We specify our problem here
#
eval.problem.data = ec.app.regression.RegressionData

gp.tree.print-style = c
#Para imprimir em .dot para visualizar no GraphViz
#gp.tree.print-style = dot

stat.gather-full = true

eval.problem = ec.ssr.problems.Regression

### Don't show best individual information on screen
stat.do-message = 						false

# Elitism size = 1
breed.elite.0 =							1

# Max depth during mutation and crossover operations
gp.koza.mutate.maxdepth = 7
gp.koza.xover.maxdepth = 7

# Grow method used only during subtree generation
# on mutation operator. 
gp.koza.grow.min-depth = 5
gp.koza.grow.max-depth = 5

# Ramped half-half used for generating initial
# population
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 7

# Overwrite fitness option
# pop.subpop.0.species.fitness = 			ec.ssr.problems.fitness.DoubleKozaFitness
